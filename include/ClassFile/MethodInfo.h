//
// Created by Danil on 27.08.2024.
//

#ifndef PARSE_BYTECODE_METHODINFO_H
#define PARSE_BYTECODE_METHODINFO_H

#include <istream>
#include <ostream>
#include <vector>
#include "utils.h"

#include "AttributeInfo.h"

struct method_info {
    u2 access_flags;
    u2 name_index;
    u2 descriptor_index;
    std::vector<attribute_info> attributes;

    enum AccessFlags: u2 {
        ACC_PUBLIC = 0x0001, //	Declared public; may be accessed from outside its package.
        ACC_PRIVATE = 0x0002, //	Declared private; accessible only within the defining class.
        ACC_PROTECTED = 0x0004, //	Declared protected; may be accessed within subclasses.
        ACC_STATIC = 0x0008, //	Declared static.
        ACC_FINAL = 0x0010, //	Declared final; must not be overridden (ยง5.4.5).
        ACC_SYNCHRONIZED = 0x0020, //	Declared synchronized; invocation is wrapped by a monitor use.
        ACC_BRIDGE = 0x0040, //	A bridge method, generated by the compiler.
        ACC_VARARGS = 0x0080, //	Declared with variable number of arguments.
        ACC_NATIVE = 0x0100, //	Declared native; implemented in a language other than Java.
        ACC_ABSTRACT = 0x0400, //	Declared abstract; no implementation is provided.
        ACC_STRICT = 0x0800, //	Declared strictfp; floating-point mode is FP-strict.
        ACC_SYNTHETIC = 0x1000, //	Declared synthetic; not present in the source code.
    };

    constexpr static const char* access_flag_to_string(u2 flag) {
        switch (flag) {
            case ACC_PUBLIC:
                return "public";
            case ACC_PRIVATE:
                return "private";
            case ACC_PROTECTED:
                return "protected";
            case ACC_STATIC:
                return "static";
            case ACC_FINAL:
                return "final";
            case ACC_SYNCHRONIZED:
                return "synchronized";
            case ACC_BRIDGE:
                return "bridge";
            case ACC_VARARGS:
                return "varargs";
            case ACC_NATIVE:
                return "native";
            case ACC_ABSTRACT:
                return "abstract";
            case ACC_STRICT:
                return "strict";
            case ACC_SYNTHETIC:
                return "synthetic";
            default:
                return "unknown";
        }
    }

    static method_info fromStream(std::istream &input);

    void saveToStream(std::ostream &output) const;
};

#endif //PARSE_BYTECODE_METHODINFO_H
